#!/usr/local/bin/python
#
# $Id: //projects/cage/wire.py#3 $ $Date: 2002/12/07 $

"""
A WireWorld simulation.
"""

__package__ = 'cage'


import curses

import cage


class WireAutomaton(cage.SynchronousAutomaton):
    states = 4

    BACKGROUND, WIRE, HEAD, TAIL = range(4)

    pattern = [
"0030002000000000000000000000000000000000000000000000000000000000000000000",
"0211031100000001111113200000003211113211000000000000000100000100000000000",
"0010001000000000000000010000000000000000100000000000001010001010000000000",
"0010101000000000000000111000000000000001110000000000001020002010000000000",
"0101110100000000000001010000000000000000100000000000000301010300000000000",
"0100100100000000000000101111111100000011011111110000000001010000000000000",
"0100100100000000000001100000000000000101000000000000000101010100000000000",
"0100100100000000000001100000000000000103000003211113211110001111231111130",
"0100100100000000000010010000000000000020000010000000000101010100000000001",
"0100100100000000000002300000000000000000000010000000000001010000000000001",
"0000000000000000000000000000000000000000000010000000000010001000000000001",
"0000000000000000000000000000000000000000000010000000000010101000000000001",
"0000000000000000000000110000000000000000000010000000000001110000000000002",
"0000011132111132113211101101000000000000000030000000000000100000000000003",
"0000000000000000000000110010100000000000000010000000000000100000000000001",
"0000000000000000000000000110011111111100000000000000000000100000000000001",
"0000000000000000000000110100000000000000000000000000000000100000000000000",
"0000011113211113111321101000000000000000000000000000000000100000000000000",
"0000000000000000000000110000000000000000000000000000000000100000000000000",
"0000000000000000000000000000000000000000000000000000000000100000000000000"
]
    
    pattern2 = ["01111111111111111111113211010001000",
               "10000000000000000000000000101010101",
               "10000000111111111111111111101010101",
               "10000001000000000000000000101010101",
               "10000010000000000111111111101010101",
               "10000100000000001000000000101010101",
               "10001000000000010000001111001010101",
               "10010000000000100000010000001010101",
               "10100000000001000000010000001010101",
               "10100000000001000000010000001010101",
               "10100000000001000000010000001010101",
               "10100000000001000000010000001010101",
               "10100000000010100000101000001010101",
               "10100000000100100000100100001010101",
               "10100000001000101110100010001010101",
               "10100000010001011011010001001010101",
               "10100000100010001010001001001010101",
               "10100001000100001110000101001010101",
               "10100001000100000100000101001010101",
               "10100001000101110101110101001010101",
               "10100001000011011011011001001010101",
               "10100001000001010001010001001010101",
               "10100001000001110001110001001010101",
               "10100001000000100000100001001010101",
               "10100001000000100000100001001010101",
               "10100001000000010000100001001010101",
               "10100001000000001000101010001010101",
               "10100001000111110000011100001010101",
               "10100001001000000000001000001010101",
               "10100001011100000001001000001010101",
               "10100001001000000010101000001010101",
               "10100001010100000010101000001010101",
               "10100000100010000010101000001010101",
               "10100000100111000010101000001010101",
               "10100000100010000010101000001010101",
               "10100000011101000010101000001010101",
               "10100000000001000010101000001010101",
               "10100000000010000010101000001010101",
               "10100001111100000010101000001010101",
               "10100010000000000010101000001010101",
               "10100100000000000010010000001010101",
               "10101110000000000010000000001010101",
               "10100100000000000100000000001010101",
               "10101010000000001111000000001010101",
               "10010001000000001011111110001010101",
               "10010011100000001111000001001010101",
               "10010001000000000100000001001010101",
               "10001110111111111000000001001010101",
               "10000000000000000000000001001010101",
               "10000000000000000000000001001010101",
               "10000000000000000000000001001010101",
               "10000000000000000000000001001010101",
               "10000000000000000000000001001010101",
               "10000000000000000000000001001010101",
               "10000000000000000000000001001010101",
               "10000000000000000000000001001010101",
               "10000000000000000000000001001010101",
               "10000000000000000000000001001010101",
               "10000000000000000000000001001010101",
               "01111111111111111111111110001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000001010101",
               "00000000000000000000000000000100010"]

    def __init__(self, size):
        cage.SynchronousAutomaton.__init__(self, cage.MooreMap(size))

    def rule(self, address):
        state = self.map.get(address)
        if state == WireAutomaton.HEAD:
            return WireAutomaton.TAIL
        elif state == WireAutomaton.TAIL:
            return WireAutomaton.WIRE
        elif state == WireAutomaton.WIRE:
            count = self.map.countWith(address, WireAutomaton.HEAD)
            if 0 < count < 3:
                return WireAutomaton.HEAD
            else:
                return WireAutomaton.WIRE
        return state


def main(stdscr):
    try:
        player = cage.CursesPlayer(stdscr)
        automaton = WireAutomaton(player.size)
        cage.StringInitializer(WireAutomaton.pattern).initialize(automaton)
        player.main(automaton)
    finally:
        player.done()

if __name__ == '__main__': curses.wrapper(main)
