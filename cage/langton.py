#!/usr/local/bin/python
#
# $Id: //projects/cage/langton.py#7 $ $Date: 2002/12/07 $

"""
An implementation of the Langton self-reproducing automaton.
"""

__package__ = 'cage'


import curses

import cage


class LangtonAutomaton(cage.SynchronousAutomaton):
    states = 8

    # The initial pattern that will reproduce itself.
    pattern = ["022222222000000",
               "217014014200000",
               "202222220200000",
               "272000021200000",
               "212000021200000",
               "202000021200000",
               "272000021200000",
               "212222221222220",
               "207107107111112",
               "022222222222220"]

    # Rule entries are of the form:
    #     current, neighbor1, neighbor2, neighbor3, neighbor4, new
    rules = [ [ 0, 0, 0, 0, 1, 2 ],
              [ 0, 0, 0, 0, 6, 3 ],
              [ 0, 0, 0, 0, 7, 1 ],
              [ 0, 0, 0, 1, 1, 2 ],
              [ 0, 0, 0, 1, 2, 2 ],
              [ 0, 0, 0, 1, 3, 2 ],
              [ 0, 0, 0, 2, 1, 2 ],
              [ 0, 0, 0, 2, 6, 2 ],
              [ 0, 0, 0, 2, 7, 2 ],
              [ 0, 0, 0, 5, 2, 5 ],
              [ 0, 0, 0, 6, 2, 2 ],
              [ 0, 0, 0, 7, 2, 2 ],
              [ 0, 0, 1, 0, 2, 2 ],
              [ 0, 0, 2, 1, 2, 5 ],
              [ 0, 0, 2, 3, 2, 2 ],
              [ 0, 0, 5, 2, 2, 2 ],
              [ 0, 1, 2, 3, 2, 1 ],
              [ 0, 1, 2, 4, 2, 1 ],
              [ 0, 1, 2, 5, 2, 5 ],
              [ 0, 1, 2, 6, 2, 1 ],
              [ 0, 1, 2, 7, 2, 1 ],
              [ 0, 1, 2, 7, 5, 1 ],
              [ 0, 1, 4, 2, 2, 1 ],
              [ 0, 1, 4, 3, 2, 1 ],
              [ 0, 1, 4, 4, 2, 1 ],
              [ 0, 1, 4, 7, 2, 1 ],
              [ 0, 1, 6, 2, 5, 1 ],
              [ 0, 1, 7, 2, 2, 1 ],
              [ 0, 1, 7, 2, 5, 5 ],
              [ 0, 1, 7, 5, 2, 1 ],
              [ 0, 1, 7, 6, 2, 1 ],
              [ 0, 1, 7, 7, 2, 1 ],
              [ 0, 2, 5, 2, 7, 1 ],
              [ 1, 0, 0, 0, 1, 1 ],
              [ 1, 0, 0, 0, 6, 1 ],
              [ 1, 0, 0, 0, 7, 7 ],
              [ 1, 0, 0, 1, 1, 1 ],
              [ 1, 0, 0, 1, 2, 1 ],
              [ 1, 0, 0, 2, 1, 1 ],
              [ 1, 0, 0, 2, 4, 4 ],
              [ 1, 0, 0, 2, 7, 7 ],
              [ 1, 0, 0, 5, 1, 1 ],
              [ 1, 0, 1, 0, 1, 1 ],
              [ 1, 0, 1, 1, 1, 1 ],
              [ 1, 0, 1, 2, 4, 4 ],
              [ 1, 0, 1, 2, 7, 7 ],
              [ 1, 0, 2, 0, 2, 6 ],
              [ 1, 0, 2, 1, 2, 1 ],
              [ 1, 0, 2, 2, 1, 1 ],
              [ 1, 0, 2, 2, 4, 4 ],
              [ 1, 0, 2, 2, 6, 3 ],
              [ 1, 0, 2, 2, 7, 7 ],
              [ 1, 0, 2, 3, 2, 7 ],
              [ 1, 0, 2, 4, 2, 4 ],
              [ 1, 0, 2, 6, 2, 6 ],
              [ 1, 0, 2, 6, 4, 4 ],
              [ 1, 0, 2, 6, 7, 7 ],
              [ 1, 0, 2, 7, 2, 7 ],
              [ 1, 0, 5, 4, 2, 7 ],
              [ 1, 1, 1, 1, 2, 1 ],
              [ 1, 1, 1, 2, 2, 1 ],
              [ 1, 1, 1, 2, 4, 4 ],
              [ 1, 1, 1, 2, 5, 1 ],
              [ 1, 1, 1, 2, 6, 1 ],
              [ 1, 1, 1, 2, 7, 7 ],
              [ 1, 1, 1, 5, 2, 2 ],
              [ 1, 1, 2, 1, 2, 1 ],
              [ 1, 1, 2, 2, 2, 1 ],
              [ 1, 1, 2, 2, 4, 4 ],
              [ 1, 1, 2, 2, 5, 1 ],
              [ 1, 1, 2, 2, 7, 7 ],
              [ 1, 1, 2, 3, 2, 1 ],
              [ 1, 1, 2, 4, 2, 4 ],
              [ 1, 1, 2, 6, 2, 1 ],
              [ 1, 1, 2, 7, 2, 7 ],
              [ 1, 1, 3, 2, 2, 1 ],
              [ 1, 2, 2, 2, 4, 4 ],
              [ 1, 2, 2, 2, 7, 7 ],
              [ 1, 2, 2, 4, 3, 4 ],
              [ 1, 2, 2, 5, 4, 7 ],
              [ 1, 2, 3, 2, 4, 4 ],
              [ 1, 2, 3, 2, 7, 7 ],
              [ 1, 2, 4, 2, 5, 5 ],
              [ 1, 2, 4, 2, 6, 7 ],
              [ 1, 2, 5, 2, 7, 5 ],
              [ 2, 0, 0, 0, 1, 2 ],
              [ 2, 0, 0, 0, 2, 2 ],
              [ 2, 0, 0, 0, 4, 2 ],
              [ 2, 0, 0, 0, 7, 1 ],
              [ 2, 0, 0, 1, 2, 2 ],
              [ 2, 0, 0, 1, 5, 2 ],
              [ 2, 0, 0, 2, 1, 2 ],
              [ 2, 0, 0, 2, 2, 2 ],
              [ 2, 0, 0, 2, 3, 2 ],
              [ 2, 0, 0, 2, 4, 2 ],
              [ 2, 0, 0, 2, 6, 2 ],
              [ 2, 0, 0, 2, 7, 2 ],
              [ 2, 0, 0, 3, 2, 6 ],
              [ 2, 0, 0, 4, 2, 3 ],
              [ 2, 0, 0, 5, 1, 7 ],
              [ 2, 0, 0, 5, 2, 2 ],
              [ 2, 0, 0, 5, 7, 5 ],
              [ 2, 0, 0, 7, 2, 2 ],
              [ 2, 0, 1, 0, 2, 2 ],
              [ 2, 0, 1, 1, 2, 2 ],
              [ 2, 0, 1, 2, 2, 2 ],
              [ 2, 0, 1, 4, 2, 2 ],
              [ 2, 0, 1, 7, 2, 2 ],
              [ 2, 0, 2, 0, 2, 2 ],
              [ 2, 0, 2, 0, 3, 2 ],
              [ 2, 0, 2, 0, 5, 2 ],
              [ 2, 0, 2, 0, 7, 3 ],
              [ 2, 0, 2, 1, 2, 2 ],
              [ 2, 0, 2, 1, 5, 2 ],
              [ 2, 0, 2, 2, 1, 2 ],
              [ 2, 0, 2, 2, 2, 2 ],
              [ 2, 0, 2, 2, 7, 2 ],
              [ 2, 0, 2, 3, 2, 1 ],
              [ 2, 0, 2, 4, 2, 2 ],
              [ 2, 0, 2, 4, 5, 2 ],
              [ 2, 0, 2, 5, 5, 2 ],
              [ 2, 0, 2, 6, 2, 2 ],
              [ 2, 0, 2, 7, 2, 2 ],
              [ 2, 0, 3, 1, 2, 2 ],
              [ 2, 0, 3, 2, 1, 6 ],
              [ 2, 0, 3, 2, 2, 6 ],
              [ 2, 0, 3, 4, 2, 2 ],
              [ 2, 0, 4, 2, 2, 2 ],
              [ 2, 0, 5, 1, 2, 2 ],
              [ 2, 0, 5, 2, 1, 2 ],
              [ 2, 0, 5, 2, 2, 2 ],
              [ 2, 0, 5, 5, 2, 1 ],
              [ 2, 0, 5, 7, 2, 5 ],
              [ 2, 0, 6, 2, 2, 2 ],
              [ 2, 0, 6, 7, 2, 2 ],
              [ 2, 0, 7, 1, 2, 2 ],
              [ 2, 0, 7, 2, 2, 2 ],
              [ 2, 0, 7, 4, 2, 2 ],
              [ 2, 0, 7, 7, 2, 2 ],
              [ 2, 1, 1, 2, 2, 2 ],
              [ 2, 1, 1, 2, 6, 1 ],
              [ 2, 1, 2, 2, 2, 2 ],
              [ 2, 1, 2, 2, 4, 2 ],
              [ 2, 1, 2, 2, 6, 2 ],
              [ 2, 1, 2, 2, 7, 2 ],
              [ 2, 1, 4, 2, 2, 2 ],
              [ 2, 1, 5, 2, 2, 2 ],
              [ 2, 1, 6, 2, 2, 2 ],
              [ 2, 1, 7, 2, 2, 2 ],
              [ 2, 2, 2, 2, 7, 2 ],
              [ 2, 2, 2, 4, 4, 2 ],
              [ 2, 2, 2, 4, 6, 2 ],
              [ 2, 2, 2, 7, 6, 2 ],
              [ 2, 2, 2, 7, 7, 2 ],
              [ 3, 0, 0, 0, 1, 3 ],
              [ 3, 0, 0, 0, 2, 2 ],
              [ 3, 0, 0, 0, 4, 1 ],
              [ 3, 0, 0, 0, 7, 6 ],
              [ 3, 0, 0, 1, 2, 3 ],
              [ 3, 0, 0, 4, 2, 1 ],
              [ 3, 0, 0, 6, 2, 2 ],
              [ 3, 0, 1, 0, 2, 1 ],
              [ 3, 0, 2, 5, 1, 1 ],
              [ 4, 0, 2, 2, 2, 1 ],
              [ 4, 0, 2, 3, 2, 6 ],
              [ 4, 0, 3, 2, 2, 1 ],
              [ 5, 0, 0, 0, 2, 2 ],
              [ 5, 0, 0, 2, 1, 5 ],
              [ 5, 0, 0, 2, 2, 5 ],
              [ 5, 0, 0, 2, 3, 2 ],
              [ 5, 0, 0, 2, 7, 2 ],
              [ 5, 0, 2, 0, 2, 2 ],
              [ 5, 0, 2, 1, 2, 2 ],
              [ 5, 0, 2, 1, 5, 2 ],
              [ 5, 0, 2, 2, 4, 4 ],
              [ 5, 0, 2, 7, 2, 2 ],
              [ 5, 1, 2, 1, 2, 2 ],
              [ 5, 1, 2, 4, 2, 2 ],
              [ 5, 1, 2, 7, 2, 2 ],
              [ 6, 0, 0, 0, 1, 1 ],
              [ 6, 0, 0, 0, 2, 1 ],
              [ 6, 1, 2, 1, 2, 5 ],
              [ 6, 1, 2, 1, 3, 1 ],
              [ 6, 1, 2, 2, 2, 5 ],
              [ 7, 0, 0, 0, 7, 7 ],
              [ 7, 0, 2, 2, 2, 1 ],
              [ 7, 0, 2, 2, 5, 1 ],
              [ 7, 0, 2, 3, 2, 1 ],
              [ 7, 0, 2, 5, 2, 5 ] ]

    # Create a blank table.
    table = [None] * states
    for a in range(states):
        table[a] = [None] * states
        for b in range(states):
            table[a][b] = [None] * states
            for c in range(states):
                table[a][b][c] = [None] * states
                for d in range(states):
                    table[a][b][c][d] = [0] * states

    # Now populate it.
    for rule in rules:
        current, n1, n2, n3, n4, new = rule
        # The rules are independent of orientation.
        table[current][n1][n2][n3][n4] = new
        table[current][n2][n3][n4][n1] = new
        table[current][n3][n4][n1][n2] = new
        table[current][n4][n1][n2][n3] = new

    def __init__(self, size):
        cage.SynchronousAutomaton.__init__(self, cage.VonNeumannMap(size))

    def rule(self, address):
        current = self.map.get(address)
        states = self.map.states(address)
        return self.table[current][states[0]][states[1]][states[2]][states[3]]


def main(stdscr):
    try:
        player = cage.CursesPlayer(stdscr)
        automaton = LangtonAutomaton(player.size)
        cage.StringInitializer(LangtonAutomaton.pattern).initialize(automaton)
        player.main(automaton)
    finally:
        player.done()

if __name__ == '__main__': curses.wrapper(main)
